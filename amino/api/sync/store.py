from amino.api.base import BaseClass
from amino import args, BaseObject, WalletInfo, AminoMembershipInfo, AccountSubscription, WalletHistoryItem
from amino import SpecifyType
from uuid import uuid4

class GlobalStoreModule(BaseClass):

	def purchase(self, objectId: str, objectType: int = args.PurchaseTypes.Bubble, isAutoRenew: bool = False) -> BaseObject:
		"""
		Purchasing something from store

		**Parameters**:
		- objectId: id of object that you wanna buy
		- isAutoRenew: do you wanna auto renew your purchase?
		"""
		data = {
			"objectId": objectId,
			"objectType": objectType,
			"v": 1,
			"paymentContext":
			{
				"discountStatus": 0,
				"isAutoRenew": isAutoRenew
			},
		}

		return BaseObject(self.req.make_sync_request("POST", f"/g/s/store/purchase", data).json())

	def wallet_config(self, level: int) -> BaseObject:
		"""
		Changes ads config

		**Parameters**
		- level - Level of the ads.
			- ``1``, ``2``
		"""
		
		data = {
			"adsLevel": level,
		}
	
		return BaseObject(self.req.make_sync_request("POST", f"/g/s/wallet/ads/config", data).json())

	def get_subscriptions(self, start: int = 0, size: int = 25) -> AccountSubscription:
		"""
		Get Information about the account's Subscriptions.

		**Parameters**
		- start : Where to start the list.
		- size : Size of the list.
		"""
		return AccountSubscription(self.req.make_sync_request("GET", f"/g/s/store/subscription?objectType=122&start={start}&size={size}").json())

	def claim_coupon(self) -> BaseObject:
		"""
		Claim the New User Coupon available when a new account is created.
		"""
		return BaseObject(self.req.make_sync_request("GET", f"/g/s/coupon/new-user-coupon/claim").json())

	def get_wallet_info(self)-> WalletInfo:
		"""
		Get Information about the account's Wallet.
		"""
		return WalletInfo(self.req.make_sync_request("GET", f"/g/s/wallet").json())


	def get_wallet_history(self, start: int = 0, size: int = 25) -> list[WalletHistoryItem]:
		"""
		Get the Wallet's History Information.

		**Parameters**
		- start : Where to start the list.
		- size : Size of the list.
		"""
		return [WalletHistoryItem(x) for x in self.req.make_sync_request("GET", f"/g/s/wallet/coin/history?start={start}&size={size}").json()["coinHistoryList"]]

	def send_coins(self, coins: int, blogId: str | None = None, chatId: str | None = None, objectId: str | None = None, transactionId: str | None = None) -> BaseObject:

		"""
		Sending coins.

		**Parameters**
		- coins : number of coins to send (maximum 500 at a time)
		- blogId : ID of the Blog.
		- chatId : ID of the Chat.
		- objectId : ID of some object.
		- transactionId : transaction ID (automatically generated by default)
		"""
		
		if transactionId is None:
			transactionId = str(uuid4())

		data = {
			"coins": coins,
			"tippingContext": {"transactionId": transactionId if transactionId else str(uuid4())},
		}

		if blogId is not None:
			url = f"/g/s/blog/{blogId}/tipping"
		elif chatId is not None:
			url = f"/g/s/chat/thread/{chatId}/tipping"
		elif objectId is not None:
			data["objectId"] = objectId
			data["objectType"] = 2
			url = f"/g/s/tipping"
		else:raise SpecifyType

		return BaseObject(self.req.make_sync_request("POST", url, data).json())
	

	def get_membership_info(self) -> AminoMembershipInfo:
		"""
		Get Information about your Amino+ Membership.
		"""
		return AminoMembershipInfo(self.req.make_sync_request("GET", f"/g/s/membership?force=true").json())